<?php

namespace WebVideo\Commands;

use App\Console\Commands\WebVideo\Commands\App;
use Illuminate\Console\Command;
use Illuminate\Support\Str;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\PhpExecutableFinder;
use Symfony\Component\Process\Process;
use function base_path;

class Render extends ManagerCommand
{

    protected $signature = 'manager:render';

    protected $description = 'Starts to rendera project with id';

    public function handle()
    {
        foreach ($this->options() as $processName => $process) {
            $processName = Str::ucfirst(Str::after($processName, 'no-'));

            if (!$this->processes[$processName]) continue;

            $command = new Process($this->processes[$processName], App::storagePath(), null, null, 600);
            $this->surprise('Starting with: ' . $processName . 'Max time:' . $command->getTimeout() . ', Command line: ' . $command->getCommandLine());
            $command->run(function ($output) use ($processName, $command) {
                $this->surprise('Output from: ' . $processName . ': Commandline:' . $command->getCommandLine() . print_r($output, 1));
            });
        }

        return Command::SUCCESS;
    }

    public function init()
    {
        $this->processes[] = [
            'label' => 'render',
            'version' => 3.1,
            'exec' => 'blender ',
            'arguments' => [],
        ];
        $this->zooSetDefaults(['timestamp' => true]);

        foreach ($this->processes as $processName => $process) {
            $this->addOption('no-' . Str::lower($processName),
                Str::upper($processName[0])
                , InputOption::VALUE_NONE);
        }

    }

    public function run(InputInterface $input, OutputInterface $output)
    {

        return parent::run($input, $output); // TODO: Change the autogenerated stub
    }

    protected function serverCommand()
    {
        return [
            (new PhpExecutableFinder)->find(false),
            '-S',
            $this->host() . ':' . $this->port(),
            base_path('server.php'),
        ];
    }
}
